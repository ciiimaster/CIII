SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- --------------------------------------------------------------------
-- This stored procedure generate the code for  UPSERT operation on a specific table
-- --------------------------------------------------------------------

-- EXEC [dbo].[usp_GenerateUpsertStodedProcedure] @TableName = 'City'
-- EXEC [dbo].[usp_GenerateUpsertStodedProcedure] @TableName = 'Client'

CREATE PROCEDURE [dbo].[usp_GenerateUpsertStodedProcedure]
     @TableName NVARCHAR(50)
AS
BEGIN     

	DECLARE @CR NVARCHAR(2) = Char(13)+Char(10) 
	DECLARE @StoredProcedure NVARCHAR(MAX) = ''
		   ,@ParamList       NVARCHAR(MAX) = NULL
		   ,@FieldList       NVARCHAR(MAX) = NULL
		   ,@SelectParamList NVARCHAR(MAX) = NULL
		   ,@SetList         NVARCHAR(MAX) = NULL
		   ,@SetOverrideList NVARCHAR(MAX) = ''
		   ,@Schema          NVARCHAR(50)
	       
	DECLARE @Tab1 NVARCHAR(50)
		   ,@Tab2 NVARCHAR(50)
		   ,@Tab3 NVARCHAR(50)
		   ,@Tab4 NVARCHAR(50)

	SET @Tab1 = REPLICATE(CHAR(9),1 ) 
	SET @Tab2 = REPLICATE(CHAR(9),2 )      
	SET @Tab3 = REPLICATE(CHAR(9),3 )      
	SET @Tab4 = REPLICATE(CHAR(9),4 )      

	SET  @Schema = (SELECT  SCHEMA_NAME(schema_id) As SchemaName from sys.tables WHERE [name] = @tableName );
	
	-- ----------------------------------------------------------------
	-- Get Override field
	SET @SetOverrideList =                    @Tab1 + 'IF @ForceOverride = 1'+ @CR
	SET @SetOverrideList = @SetOverrideList + @Tab1 + 'BEGIN'+ + @CR
	SET @SetOverrideList = @SetOverrideList + @Tab1 + '    SET @ForceOverride=@ForceOverride'+  @CR
	SELECT 
		  @SetOverrideList = @SetOverrideList  
		  + @Tab2+ 'SET @'+COLUMN_NAME+' = @'+SUBSTRING(COLUMN_NAME,1,CHARINDEX('_Override',COLUMN_NAME)-1) + @CR
		  + @Tab2+ 'SET @'+SUBSTRING(COLUMN_NAME,1,CHARINDEX('_Override',COLUMN_NAME)-1) +' = NULL' + @CR 
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = @TableName
	  AND COLUMN_NAME LIKE '%_Override'
	SET @SetOverrideList = @SetOverrideList + @Tab1 + 'END'+  @CR  +  @CR

	
	-- ----------------------------------------------------------------
	-- Stored Procedure Parameters
	SELECT 
		 @ParamList = COALESCE(@ParamList +',',@Tab1) + @CR + @Tab1+
		 '@'+COLUMN_NAME+' AS ' + CASE WHEN DATA_TYPE = 'nvarchar' THEN 'NVARCHAR('+ CASE WHEN  CONVERT(NVARCHAR,CHARACTER_MAXIMUM_LENGTH) = '-1' THEN 'MAX' ELSE  CONVERT(NVARCHAR,CHARACTER_MAXIMUM_LENGTH) END +')' 
								 ELSE UPPER(DATA_TYPE) END + CASE WHEN SUBSTRING(COLUMN_NAME,1,3) = 'PK_' THEN ' = -1 ' ELSE ' = NULL' END
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = @TableName

	-- ----------------------------------------------------------------
	-- Stored Procedure Parameters
	SELECT 
		  @FieldList = COALESCE(@FieldList +',',@Tab1+'(') + @CR + @Tab2+
		 '['+COLUMN_NAME+'] '
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = @TableName
	  AND SUBSTRING(COLUMN_NAME,1,3) != 'PK_'
	SET @FieldList = @FieldList + ')'

	-- ----------------------------------------------------------------
	-- Select Parameter statement
	SELECT 
		  @SelectParamList = COALESCE(@SelectParamList +',',@Tab1+'SELECT ') + @CR + @Tab2 +
		 '@'+COLUMN_NAME+''
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = @TableName
	AND SUBSTRING(COLUMN_NAME,1,3) != 'PK_'
	
	
	

	-- ----------------------------------------------------------------
	-- Set statement
	SELECT 
		  @SetList = COALESCE(@SetList +',',@Tab1+'SET ') + @CR + @Tab2 +
		 '[ur].['+COLUMN_NAME+'] = '+'COALESCE(@'+COLUMN_NAME +','+ '[ur].['+COLUMN_NAME+'])'
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = @TableName
	AND SUBSTRING(COLUMN_NAME,1,3) != 'PK_'

    -- Drop stored procedure if exists
	SET @StoredProcedure =
	   '-- ----------------------------------------------------------------------------' +  @CR
	  +'IF EXISTS (SELECT * FROM dbo.sysobjects ' +  @CR
	  +'            WHERE id = object_id(N''[dbo].[usp_Upsert'+@TableName+']'')' +  @CR
	  +'             and OBJECTPROPERTY(id, N''IsProcedure'') = 1) ' +  @CR
	  +'   DROP PROCEDURE [dbo].[usp_Upsert'+@TableName+'] '
	 EXEC( @StoredProcedure ) 
	 PRINT @StoredProcedure
	  
	 SET @StoredProcedure =
	   
	   '-- ----------------------------------------------------------------------------' +  @CR
	  +'-- INSERT, UPDATE a row for the [' + @TableName + '] table' +  @CR
	  +'-- NOTE : DO NOT UPDATE this stored procedure, ' +  @CR
	  +'--        the code was autogenerated by usp_GenerateUpsertStodedProcedure' +  @CR
	  +'-- ----------------------------------------------------------------------------' +  @CR
	  +'--  How to call this stored procedure ....' +  @CR
	  +'-- '+  @CR
	  +'-- 	EXEC	@return_value = [dbo].[usp_UpsertCity]' +  @CR
	  +'-- 		@PK_City = -1,' +  @CR
	  +'-- 		@Code = N''LAV'', '+  @CR
	  +'-- 		@Name = N''Laval'' '+ @CR
      +'-- ' +  @CR 
      +'-- '+@CR
	 	 
	  +'CREATE PROCEDURE [dbo].[usp_Upsert'+@TableName+']' + @CR 
      +@ParamList+',' + @CR 
      +@Tab1+'@ForceOverride BIT = 1' + @CR
	  +'AS' + @CR  
	  +'BEGIN' + @CR + @CR 
	  +@Tab1+'-- ------------------------------------------------------------' +  @CR
	  +@SetOverrideList
	  +@Tab1+'DECLARE @Result  TABLE ( FK int);'+ @CR
	  +@Tab1+'IF @PK_'+@TableName+' = -1'+ @CR
	  +@Tab1+'BEGIN' + @CR
	  +@Tab2+'-- ------------------------------------------------------------' +  @CR
	  +@Tab2+'-- Insert a row in table  [' + @TableName + '] ' +  @CR
	  +@Tab2+'-- ------------------------------------------------------------' +  @CR
	  +@Tab1+@Tab1+'INSERT INTO ['+@Schema+'].['+@TableName+']'+ @CR
	  +@Tab1+@FieldList + @CR
	  +@Tab2+'OUTPUT Inserted.PK_'+@TableName+ ' INTO @Result ' + @CR
	  +@Tab1+@SelectParamList + @CR
	  +@Tab1+'END ELSE' + @CR
	  +@Tab1+'BEGIN' + @CR
	  +@Tab2+'-- ------------------------------------------------------------' +  @CR
	  +@Tab2+'-- Update a row in table  [' + @TableName + '] ' +  @CR
	  +@Tab2+'-- ------------------------------------------------------------' +  @CR
	  +@Tab1+@Tab1+'UPDATE [ur]'+ @CR 
	  +@Tab1+@SetList + @CR 
	  +@Tab1+@Tab1+'FROM ['+@Schema+'].['+@TableName+'] AS [ur]' + @CR 
	  +@Tab1+@Tab1+'WHERE [PK_'+@TableName+'] = @PK_'+@TableName + @CR
	  +@Tab1+'END;' + @CR
      +@Tab1+'-- ------------------------------------------------------------' +  @CR	  	  
	  +@Tab1+'IF (SELECT COUNT(*) FROM ['+@Schema+'].['+@TableName+'] WHERE PK_'+ @TableName +' = @PK_'+ @TableName +') = 0' + @CR
	  +@Tab1+'    SET @PK_'+ @TableName +' = -1 ; ' +  @CR
	  +@Tab1+'-- ------------------------------------------------------------' +  @CR
	  +@Tab1+'SELECT COALESCE((SELECT MAX(FK) FROM @Result),@PK_' + @TableName + ') AS [PK] ' +  @CR
	  +@Tab1+'-- ------------------------------------------------------------' +  @CR
	  +'END' 
    -- Create/Regenerate the stroded Procedure 
	EXEC( @StoredProcedure )
	PRINT @StoredProcedure
END;
GO
